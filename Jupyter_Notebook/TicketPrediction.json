{"paragraphs":[{"text":"import org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.IntegerType\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.classification.{DecisionTreeClassificationModel,DecisionTreeClassifier,RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}\n//import org.apache.spark.ml.feature.{Imputer, ImputerModel}\nimport org.apache.spark.sql.{SQLContext, Row, DataFrame, Column}\nimport org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer, IndexToString} \nimport org.apache.spark.ml.feature.{VectorAssembler, VectorIndexer}\nimport org.apache.spark.ml.feature.{Bucketizer,Normalizer}\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\n//import ml.dmlc.xgboost4j.scala.spark.{XGBoostEstimator, XGBoostClassificationModel}\nimport scala.collection.mutable\nimport org.apache.spark.mllib.tree.GradientBoostedTrees\nimport org.apache.spark.mllib.tree.configuration.BoostingStrategy\nimport org.apache.spark.ml.classification.{GBTClassificationModel, GBTClassifier}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\n\nval PATH = \"file:///Users/zacha/Desktop/Projects/TicketPrediction/\"\n\n//load the raw data\nval training_df = spark.read.option(\"header\",\"true\").format(\"csv\").load(PATH + \"Traffic_Stops__drivers.csv\").na.fill(\"\")\n\nval raw_cols = Seq(\"ADDRESS_X\",\"LATITUDE_X\",\"LONGITUDE_X\",\"AGENCY\",\"DISPOSITION_TEXT\", \"EVENT_NUMBER\", \"INCIDENT_TYPE_DESC\", \"INCIDENT_TYPE_ID\", \"ACTIONTAKENCID\",\"ACTIONTAKENCIDID\",\"NEIGHBORHOOD\",\"PRIORITY_\",\"INSTANCE_ID\",\"IS_JUVENILE\",\"INTERVIEW_NUMBER\",\"INTERVIEW_DATE\", \"VEHICLE_MAKE\",\"VEHICLE_MODEL\",\"VEHICLE_YEAR\",\"CONTACT_TYPE_CID\",\"LICENSE_PLATE_STATE\",\"OFFICER_ASSIGNMENT\", \"REPORT_TYPE_CID\",\"SEX\",\"RACE\",\"AGE\",\"FIELD_SUBJECT_CID\",\"AGE_RANGE_CID\",\"BEAT\")\n\nval age_splits = Array(0.0,16.0,26.0,36.0,46.0,56.0,66.0,76.0,86.0,96.0)\n\n// Array of all features of the model\n/*val features = Array(\"Road\",\"Ticketed\",\"Time\",\"ACURA\", \"ALZ\", \"AUDI\", \"BMW\", \"BUICK\",\"CADILLAC\", \"CHEVY\", \"CHRYSLER\", \"DENA\", \"DODGE\", \"FIAT\", \"FORD\", \"SEMI\", \"GMC\", \"GEO\", \"HONDA\", \"HUMMER\", \"HYUNDAI\", \"INFINITY\",\"ISUZU\",\"JAGUAR\",\"JEEP\",\"KIA\",\"LAND\",\"LEXUS\",\"LINCOLN\",\"MAZDA\",\"MERCURY\",\"MERCEDES\",\"MINI\",\"MITSUBISHI\",\"NISSAN\",\"OLDSMOBILE\",\"PLYMOUTH\",\"PONTIAC\",\"PORSCHE\",\"SAAB\",\"SATURN\", \"SCION\",\"SUBARU\",\"SUZUKI\",\"TOYOTA\",\"VOLKSWAGON\",\"VOLVO\",\"YAMAHA\",\"OTHER_MAKE\",\"CarYear\",\"CarPlateState\",\"SexVec\",\"RaceVec\")\n*/\n\nval featureCols = Array(\"ACURA\", \"ALZ\", \"AUDI\", \"BMW\", \"BUICK\",\"CADILLAC\", \"CHEVY\", \"CHRYSLER\", \"DENA\", \"DODGE\", \"FIAT\", \"FORD\", \"SEMI\", \"GMC\", \"GEO\", \"HONDA\", \"HUMMER\", \"HYUNDAI\", \"INFINITY\",\"ISUZU\",\"JAGUAR\",\"JEEP\",\"KIA\",\"LAND\",\"LEXUS\",\"LINCOLN\",\"MAZDA\",\"MERCURY\",\"MERCEDES\",\"MINI\",\"MITSUBISHI\",\"NISSAN\",\"OLDSMOBILE\",\"PLYMOUTH\",\"PONTIAC\",\"PORSCHE\",\"SAAB\",\"SATURN\", \"SCION\",\"SUBARU\",\"SUZUKI\",\"TOYOTA\",\"VOLKSWAGON\",\"VOLVO\",\"YAMAHA\",\"OTHER_MAKE\",\"CarYear\",\"SexVec\",\"RaceVec\",\"AgeEE\")\n\n\n/*\nFeatures Data Frame Columns\n#   Address (Road)\n#   Action Taken Id (Citation | No Citation)\n#   Date (Time) \n#   Vehicle Make \n#   Vehicle Model \n#   Vehicle Year \n#   License Plate State \n#   Sex\n#   Race \n#   Age range\n*/\n\n\nval featureFrame = (\n    training_df\n        .withColumn(\"Ticketed\", when($\"ACTIONTAKENCIDID\" === \"3\",1).otherwise(0))\n        .withColumn(\"ACURA\", when($\"VEHICLE_MAKE\" === \"ACCR\" or\n            $\"VEHICLE_MAKE\" === \"ACCU\" or\n            $\"VEHICLE_MAKE\" === \"ACUR\" or\n            $\"VEHICLE_MAKE\" === \"ACURA\" or\n            $\"VEHICLE_MAKE\" === \"ALUR\", 1).otherwise(0))\n        .withColumn(\"ALZ\", when($\"VEHICLE_MAKE\" === \"ALZ\", 1).otherwise(0))\n        .withColumn(\"AUDI\", when($\"VEHICLE_MAKE\" === \"AUDI\", 1).otherwise(0))\n        .withColumn(\"BMW\", when($\"VEHICLE_MAKE\" === \"BMW\", 1).otherwise(0))\n        .withColumn(\"BUICK\", when($\"VEHICLE_MAKE\" === \"BUIC\" or\n            $\"VEHICLE_MAKE\" === \"BUICK\", 1).otherwise(0))\n        .withColumn(\"CADILLAC\", when($\"VEHICLE_MAKE\" === \"CADI\" or\n            $\"VEHICLE_MAKE\" === \"CADILLAC\", 1).otherwise(0))\n        .withColumn(\"CHEVY\", when($\"VEHICLE_MAKE\" === \"CGEV\" or\n            $\"VEHICLE_MAKE\" === \"CHE\" or\n            $\"VEHICLE_MAKE\" === \"CHEV\" or\n            $\"VEHICLE_MAKE\" === \"CHEVEROLET\" or\n            $\"VEHICLE_MAKE\" === \"CHEVI\" or\n            $\"VEHICLE_MAKE\" === \"CHEVROLET\" or\n            $\"VEHICLE_MAKE\" === \"CHEVY\" or\n            $\"VEHICLE_MAKE\" === \"CHVY\", 1).otherwise(0))\n        .withColumn(\"CHRYSLER\", when($\"VEHICLE_MAKE\" === \"CHRY\" or\n            $\"VEHICLE_MAKE\" === \"CHRYS\" or\n            $\"VEHICLE_MAKE\" === \"CHRYSLER\" or\n            $\"VEHICLE_MAKE\" === \"CRY\" or\n            $\"VEHICLE_MAKE\" === \"PT\", 1).otherwise(0))\n        .withColumn(\"DENA\", when($\"VEHICLE_MAKE\" === \"DENA\", 1).otherwise(0))\n        .withColumn(\"DODGE\", when($\"VEHICLE_MAKE\" === \"DODG\" or\n            $\"VEHICLE_MAKE\" === \"DODGE\", 1).otherwise(0))\n        .withColumn(\"FIAT\", when($\"VEHICLE_MAKE\" === \"FIAT\", 1).otherwise(0))\n        .withColumn(\"FORD\", when($\"VEHICLE_MAKE\" === \"FORD\", 1).otherwise(0))\n        .withColumn(\"SEMI\", when($\"VEHICLE_MAKE\" === \"FREIGHT\" or\n            $\"VEHICLE_MAKE\" === \"FRHT\" or\n            $\"VEHICLE_MAKE\" === \"MACK\", 1).otherwise(0))\n        .withColumn(\"GMC\", when($\"VEHICLE_MAKE\" === \"GENERAL MOTORS CORP.\" or\n            $\"VEHICLE_MAKE\" === \"GMC\", 1).otherwise(0))\n        .withColumn(\"GEO\", when($\"VEHICLE_MAKE\" === \"GEO\", 1).otherwise(0))\n        .withColumn(\"HONDA\", when($\"VEHICLE_MAKE\" === \"HON\" or\n            $\"VEHICLE_MAKE\" === \"HOND\" or\n            $\"VEHICLE_MAKE\" === \"HONDA\", 1).otherwise(0))\n        .withColumn(\"HUMMER\", when($\"VEHICLE_MAKE\" === \"HUMM\", 1).otherwise(0))\n        .withColumn(\"HYUNDAI\", when($\"VEHICLE_MAKE\" === \"HUYU\" or\n            $\"VEHICLE_MAKE\" === \"HYAN\" or\n            $\"VEHICLE_MAKE\" === \"HYND\" or\n            $\"VEHICLE_MAKE\" === \"HYUA\" or\n            $\"VEHICLE_MAKE\" === \"HYUN\" or\n            $\"VEHICLE_MAKE\" === \"HYUND\" or\n            $\"VEHICLE_MAKE\" === \"HYUNDAI\", 1).otherwise(0))\n        .withColumn(\"INFINITY\", when($\"VEHICLE_MAKE\" === \"INFI\" or\n            $\"VEHICLE_MAKE\" === \"INFIN\" or\n            $\"VEHICLE_MAKE\" === \"INFINITI\" or\n            $\"VEHICLE_MAKE\" === \"INFINITY\", 1).otherwise(0))\n        .withColumn(\"ISUZU\", when($\"VEHICLE_MAKE\" === \"ISUZ\", 1).otherwise(0))\n        .withColumn(\"JAGUAR\", when($\"VEHICLE_MAKE\" === \"JAG\" or\n            $\"VEHICLE_MAKE\" === \"JAGU\", 1).otherwise(0))\n        .withColumn(\"JEEP\", when($\"VEHICLE_MAKE\" === \"JEEP\", 1).otherwise(0))\n        .withColumn(\"KIA\", when($\"VEHICLE_MAKE\" === \"KIA\" or\n            $\"VEHICLE_MAKE\" === \"KIA FORT\" or\n            $\"VEHICLE_MAKE\" === \"KIA MOTORS CORP.\", 1).otherwise(0))\n        .withColumn(\"LAND\", when($\"VEHICLE_MAKE\" === \"LAND\", 1).otherwise(0))\n        .withColumn(\"LEXUS\", when($\"VEHICLE_MAKE\" === \"LEXI\" or\n            $\"VEHICLE_MAKE\" === \"LEXS\" or\n            $\"VEHICLE_MAKE\" === \"LEXU\" or\n            $\"VEHICLE_MAKE\" === \"LEXUS\", 1).otherwise(0))\n        .withColumn(\"LINCOLN\", when($\"VEHICLE_MAKE\" === \"LINC\" or\n            $\"VEHICLE_MAKE\" === \"LINCOLN\" or\n            $\"VEHICLE_MAKE\" === \"LINCOLN / LINCOLN-CONTINENTAL\", 1).otherwise(0))\n        .withColumn(\"MAZDA\", when($\"VEHICLE_MAKE\" === \"MADZ\" or\n            $\"VEHICLE_MAKE\" === \"MAZ\" or\n            $\"VEHICLE_MAKE\" === \"MAZD\" or\n            $\"VEHICLE_MAKE\" === \"MAZDA\", 1).otherwise(0))\n        .withColumn(\"MERCURY\", when($\"VEHICLE_MAKE\" === \"MECR\" or\n            $\"VEHICLE_MAKE\" === \"MERC\" or\n            $\"VEHICLE_MAKE\" === \"MERCURY\" or\n            $\"VEHICLE_MAKE\" === \"MERG\", 1).otherwise(0))\n        .withColumn(\"MERCEDES\", when($\"VEHICLE_MAKE\" === \"MERCEDES\" or\n            $\"VEHICLE_MAKE\" === \"MERZ\", 1).otherwise(0))\n        .withColumn(\"MINI\", when($\"VEHICLE_MAKE\" === \"MINI\", 1).otherwise(0))\n        .withColumn(\"MITSUBISHI\", when($\"VEHICLE_MAKE\" === \"MITI\" or\n            $\"VEHICLE_MAKE\" === \"MITS\" or\n            $\"VEHICLE_MAKE\" === \"MITSUBISHI\" or\n            $\"VEHICLE_MAKE\" === \"MITZ\", 1).otherwise(0))\n        .withColumn(\"NISSAN\", when($\"VEHICLE_MAKE\" === \"NISS\" or\n            $\"VEHICLE_MAKE\" === \"NISSAN\" or\n            $\"VEHICLE_MAKE\" === \"NISSIAN\", 1).otherwise(0))\n        .withColumn(\"OLDSMOBILE\", when($\"VEHICLE_MAKE\" === \"OLDS\" or\n            $\"VEHICLE_MAKE\" === \"OLDSMOBILE\", 1).otherwise(0))\n        .withColumn(\"PLYMOUTH\", when($\"VEHICLE_MAKE\" === \"PLYM\", 1).otherwise(0))\n        .withColumn(\"PONTIAC\", when($\"VEHICLE_MAKE\" === \"PONT\" or\n            $\"VEHICLE_MAKE\" === \"PONTAIC\" or\n            $\"VEHICLE_MAKE\" === \"PONTIAC\", 1).otherwise(0))\n        .withColumn(\"PORSCHE\", when($\"VEHICLE_MAKE\" === \"PORS\" or\n            $\"VEHICLE_MAKE\" === \"PORSCHE\", 1).otherwise(0))\n        .withColumn(\"SAAB\", when($\"VEHICLE_MAKE\" === \"SAAB\", 1).otherwise(0))\n        .withColumn(\"SATURN\", when($\"VEHICLE_MAKE\" === \"sATR\" or\n            $\"VEHICLE_MAKE\" === \"SATU\" or\n            $\"VEHICLE_MAKE\" === \"SATURN\" or\n            $\"VEHICLE_MAKE\" === \"STRN\", 1).otherwise(0))\n        .withColumn(\"SCION\", when($\"VEHICLE_MAKE\" === \"SCIO\" or\n            $\"VEHICLE_MAKE\" === \"SCION\", 1).otherwise(0))\n        .withColumn(\"SUBARU\", when($\"VEHICLE_MAKE\" === \"SUB\" or\n            $\"VEHICLE_MAKE\" === \"SUBA\" or\n            $\"VEHICLE_MAKE\" === \"SUBU\", 1).otherwise(0))\n        .withColumn(\"SUZUKI\", when($\"VEHICLE_MAKE\" === \"SUZI\" or\n            $\"VEHICLE_MAKE\" === \"SUZK\" or\n            $\"VEHICLE_MAKE\" === \"SUZU\", 1).otherwise(0))\n        .withColumn(\"TOYOTA\", when($\"VEHICLE_MAKE\" === \"TOYA\" or\n            $\"VEHICLE_MAKE\" === \"TOYO\" or\n            $\"VEHICLE_MAKE\" === \"TOYOTA\" or\n            $\"VEHICLE_MAKE\" === \"TOYT\", 1).otherwise(0))\n        .withColumn(\"VOLKSWAGON\", when($\"VEHICLE_MAKE\" === \"VOLK\" or\n            $\"VEHICLE_MAKE\" === \"VOLKS\" or\n            $\"VEHICLE_MAKE\" === \"VOLKSWAGEN\" or\n            $\"VEHICLE_MAKE\" === \"VOLKSWAGEN / VOLKSWAGON\" or\n            $\"VEHICLE_MAKE\" === \"VW\", 1).otherwise(0))\n        .withColumn(\"VOLVO\", when($\"VEHICLE_MAKE\" === \"VOLV\", 1).otherwise(0))\n        .withColumn(\"YAMAHA\", when($\"VEHICLE_MAKE\" === \"YAMA\", 1).otherwise(0))\n        .withColumn(\"OTHER_MAKE\", when($\"VEHICLE_MAKE\" === \"\", 1).otherwise(0))\n        .withColumn(\"CarYear\",$\"VEHICLE_YEAR\".cast(\"double\"))\n        //.withColumn(\"CarPlateState\",$\"LICENSE_PLATE_STATE\")\n        .withColumn(\"AgeE\", $\"AGE\".cast(\"double\"))\n        //.withColumn(\"Road\",regexp_extract($\"ADDRESS_X\",raw\"X[\\s]+([A-Z0-9]+[A-Z0-9\\s]*)\",1))\n        //.withColumn(\"Time\", regexp_extract($\"INTERVIEW_DATE\",(raw\"([\\d]{2}:[\\d]{2}:[\\d]{2}\\s[A-Z]{2})\"),1))\n        \n        )\n\nval sexIndexer = new StringIndexer().setInputCol(\"SEX\").setOutputCol(\"SexIndex\")\nval sexEncoder = new OneHotEncoder().setInputCol(\"SexIndex\").setOutputCol(\"SexVec\")\n\nval raceIndexer = new StringIndexer().setInputCol(\"RACE\").setOutputCol(\"RaceIndex\")\nval raceEncoder = new OneHotEncoder().setInputCol(\"RaceIndex\").setOutputCol(\"RaceVec\")\n\nval age_bucketize = new Bucketizer().setInputCol(\"AgeE\").setOutputCol(\"AgeEE\").setSplits(age_splits)\n\n\nval indexPipeline = (new Pipeline().setStages(Array(sexIndexer,raceIndexer,sexEncoder, raceEncoder, age_bucketize)))\n\nval indexFrame = indexPipeline.fit(featureFrame).transform(featureFrame).drop(\"ADDRESS_X\",\"LATITUDE_X\",\"LONGITUDE_X\",\"AGENCY\",\"DISPOSITION_TEXT\", \"EVENT_NUMBER\", \"INCIDENT_TYPE_DESC\", \"INCIDENT_TYPE_ID\", \"ACTIONTAKENCID\",\"ACTIONTAKENCIDID\",\"NEIGHBORHOOD\",\"PRIORITY_\",\"INSTANCE_ID\",\"IS_JUVENILE\",\"INTERVIEW_NUMBER\",\"INTERVIEW_DATE\", \"VEHICLE_MAKE\",\"VEHICLE_MODEL\",\"VEHICLE_YEAR\",\"CONTACT_TYPE_CID\",\"LICENSE_PLATE_STATE\",\"OFFICER_ASSIGNMENT\", \"REPORT_TYPE_CID\",\"SEX\",\"RACE\",\"AGE\",\"FIELD_SUBJECT_CID\",\"AGE_RANGE_CID\",\"BEAT\",\"AgeE\").na.drop\n\nval assembler = new VectorAssembler().setInputCols(featureCols).setOutputCol(\"features\")\n\nval gbt = new RandomForestClassifier()\n    .setLabelCol(\"Ticketed\")\n    .setFeaturesCol(\"features\")\n    .setNumTrees(10)\n    .setRawPredictionCol(\"accuracy\")\n    .setProbabilityCol(\"confidence\")\n\n\nval featuresPipeline = (new Pipeline().setStages(Array(assembler,gbt)))\n\nval splits = indexFrame.randomSplit(Array(0.8,0.2))\n\nval (trainingData, testData) = (splits(0),splits(1))\n\nval trainingFeaturesDF = featuresPipeline.fit(trainingData).transform(testData)\n\ntrainingFeaturesDF.select(\"features\",\"prediction\",\"confidence\").take(100).foreach(println)\n\n\n\n/*\nval boostingStrategy = BoostingStrategy.defaultParams(\"Classification\")\n\nboostingStrategy.numIterations = 3\n\nval model = GradientBoostedTrees.train(trainingData,boostingStrategy)\n\nval testErr = testData.map { point =>\n  val prediction = model.predict(point.features)\n  if (point.label == prediction) 1.0 else 0.0\n}.mean()\n\nprintln(\"Test Error = \" + testErr)\n\nprintln(\"Learned GBT model:n\" + model.toDebugString)\n*/\n\n","user":"anonymous","dateUpdated":"2017-08-27T12:24:20-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":false,"lineNumbers":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.sql.SparkSession\n\nimport org.apache.spark.sql.functions._\n\nimport org.apache.spark.sql.types.IntegerType\n\nimport org.apache.spark.ml.linalg.Vectors\n\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\n\nimport org.apache.spark.ml.classification.{DecisionTreeClassificationModel, DecisionTreeClassifier, RandomForestClassificationModel, RandomForestClassifier}\n\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\n\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}\n\nimport org.apache.spark.sql.{SQLContext, Row, DataFrame, Column}\n\nimport org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer, IndexToString}\n\nimport org.apache.spark.ml.feature.{VectorAssembler, VectorIndexer}\n\nimport org.apache.spark.ml.feature.{Bucketizer, Normalizer}\n\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\n\nimport scala.collection.mutable\n\nimport org.apache.spark.mllib.tree.GradientBoostedTrees\n\nimport org.apache.spark.mllib.tree.configuration.BoostingStrategy\n\nimport org.apache.spark.ml.classification.{GBTClassificationModel, GBTClassifier}\n\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\n\nPATH: String = file:///Users/zacha/Desktop/Projects/TicketPrediction/\n\ntraining_df: org.apache.spark.sql.DataFrame = [ADDRESS_X: string, LATITUDE_X: string ... 27 more fields]\n\nraw_cols: Seq[String] = List(ADDRESS_X, LATITUDE_X, LONGITUDE_X, AGENCY, DISPOSITION_TEXT, EVENT_NUMBER, INCIDENT_TYPE_DESC, INCIDENT_TYPE_ID, ACTIONTAKENCID, ACTIONTAKENCIDID, NEIGHBORHOOD, PRIORITY_, INSTANCE_ID, IS_JUVENILE, INTERVIEW_NUMBER, INTERVIEW_DATE, VEHICLE_MAKE, VEHICLE_MODEL, VEHICLE_YEAR, CONTACT_TYPE_CID, LICENSE_PLATE_STATE, OFFICER_ASSIGNMENT, REPORT_TYPE_CID, SEX, RACE, AGE, FIELD_SUBJECT_CID, AGE_RANGE_CID, BEAT)\n\nage_splits: Array[Double] = Array(0.0, 16.0, 26.0, 36.0, 46.0, 56.0, 66.0, 76.0, 86.0, 96.0)\n\nfeatureCols: Array[String] = Array(ACURA, ALZ, AUDI, BMW, BUICK, CADILLAC, CHEVY, CHRYSLER, DENA, DODGE, FIAT, FORD, SEMI, GMC, GEO, HONDA, HUMMER, HYUNDAI, INFINITY, ISUZU, JAGUAR, JEEP, KIA, LAND, LEXUS, LINCOLN, MAZDA, MERCURY, MERCEDES, MINI, MITSUBISHI, NISSAN, OLDSMOBILE, PLYMOUTH, PONTIAC, PORSCHE, SAAB, SATURN, SCION, SUBARU, SUZUKI, TOYOTA, VOLKSWAGON, VOLVO, YAMAHA, OTHER_MAKE, CarYear, SexVec, RaceVec, AgeEE)\n\nfeatureFrame: org.apache.spark.sql.DataFrame = [ADDRESS_X: string, LATITUDE_X: string ... 76 more fields]\n\nsexIndexer: org.apache.spark.ml.feature.StringIndexer = strIdx_a60ab572c436\n\nsexEncoder: org.apache.spark.ml.feature.OneHotEncoder = oneHot_c59a784a9716\n\nraceIndexer: org.apache.spark.ml.feature.StringIndexer = strIdx_9f5b36b78f8e\n\nraceEncoder: org.apache.spark.ml.feature.OneHotEncoder = oneHot_a1c5e882543d\n\nage_bucketize: org.apache.spark.ml.feature.Bucketizer = bucketizer_02e54578bf91\n\nindexPipeline: org.apache.spark.ml.Pipeline = pipeline_3d14a0c871b9\n\nindexFrame: org.apache.spark.sql.DataFrame = [Ticketed: int, ACURA: int ... 51 more fields]\n\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_0d3bb132a691\n\ngbt: org.apache.spark.ml.classification.RandomForestClassifier = rfc_e103aeaf58f6\n\nfeaturesPipeline: org.apache.spark.ml.Pipeline = pipeline_7ef332d98e5f\n\nsplits: Array[org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]] = Array([Ticketed: int, ACURA: int ... 51 more fields], [Ticketed: int, ACURA: int ... 51 more fields])\n\r\n\ntrainingData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Ticketed: int, ACURA: int ... 51 more fields]\r\ntestData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Ticketed: int, ACURA: int ... 51 more fields]\n\ntrainingFeaturesDF: org.apache.spark.sql.DataFrame = [Ticketed: int, ACURA: int ... 55 more fields]\n[(54,[46,47,50,53],[1999.0,1.0,1.0,4.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[46,48,49,53],[2004.0,1.0,1.0,2.0]),0.0,[0.7780566121243182,0.22194338787568188]]\r\n[(54,[46,47,50,53],[2005.0,1.0,1.0,4.0]),0.0,[0.7458171085243184,0.2541828914756817]]\r\n[(54,[46,47,50,53],[2006.0,1.0,1.0,1.0]),0.0,[0.7458171085243184,0.2541828914756817]]\r\n[(54,[46,47,50,53],[2006.0,1.0,1.0,2.0]),0.0,[0.7405226977764459,0.2594773022235542]]\r\n[(54,[46,47,49,53],[2009.0,1.0,1.0,3.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[46,47,49,53],[2013.0,1.0,1.0,3.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[46,47,49,53],[2014.0,1.0,1.0,3.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[46,47,49,53],[2014.0,1.0,1.0,3.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[46,47,50,53],[2015.0,1.0,1.0,3.0]),0.0,[0.7458171085243184,0.2541828914756817]]\r\n[(54,[44,46,47,49,53],[1.0,2008.0,1.0,1.0,3.0]),1.0,[0.4027802053648628,0.5972197946351373]]\r\n[(54,[43,46,47,49,53],[1.0,2000.0,1.0,1.0,1.0]),0.0,[0.7153856514052456,0.28461434859475443]]\r\n[(54,[43,46,47,49,53],[1.0,2000.0,1.0,1.0,1.0]),0.0,[0.7153856514052456,0.28461434859475443]]\r\n[(54,[43,46,48,49,53],[1.0,2001.0,1.0,1.0,3.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[43,46,47,49,53],[1.0,2002.0,1.0,1.0,2.0]),0.0,[0.7058684413070344,0.2941315586929655]]\r\n[(54,[43,46,47,49,53],[1.0,2002.0,1.0,1.0,2.0]),0.0,[0.7058684413070344,0.2941315586929655]]\r\n[(54,[43,46,48,49,53],[1.0,2002.0,1.0,1.0,5.0]),0.0,[0.7815843069438463,0.21841569305615366]]\r\n[(54,[43,46,47,50,53],[1.0,2004.0,1.0,1.0,6.0]),0.0,[0.7582190531711477,0.24178094682885226]]\r\n[(54,[43,46,48,49,53],[1.0,2004.0,1.0,1.0,1.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[43,46,48,49,53],[1.0,2004.0,1.0,1.0,2.0]),0.0,[0.7780566121243182,0.22194338787568188]]\r\n[(54,[43,46,47,49,53],[1.0,2006.0,1.0,1.0,1.0]),0.0,[0.7153856514052456,0.28461434859475443]]\r\n[(54,[42,46,48,49,53],[1.0,1999.0,1.0,1.0,2.0]),0.0,[0.7447383162595266,0.2552616837404735]]\r\n[(54,[42,46,47,49,53],[1.0,2001.0,1.0,1.0,1.0]),0.0,[0.7450027685223627,0.2549972314776373]]\r\n[(54,[42,46,47,49,53],[1.0,2003.0,1.0,1.0,1.0]),0.0,[0.7450027685223627,0.2549972314776373]]\r\n[(54,[42,46,47,49,53],[1.0,2006.0,1.0,1.0,1.0]),0.0,[0.7153173453943166,0.28468265460568337]]\r\n[(54,[42,46,47,50,53],[1.0,2008.0,1.0,1.0,1.0]),0.0,[0.7458171085243184,0.2541828914756817]]\r\n[(54,[42,46,48,50,53],[1.0,2009.0,1.0,1.0,1.0]),0.0,[0.7524801549673403,0.24751984503265975]]\r\n[(54,[42,46,47,49,53],[1.0,2010.0,1.0,1.0,1.0]),0.0,[0.7153173453943166,0.28468265460568337]]\r\n[(54,[42,46,47,49,53],[1.0,2010.0,1.0,1.0,2.0]),0.0,[0.7058001352961056,0.2941998647038944]]\r\n[(54,[42,46,47,50,53],[1.0,2010.0,1.0,1.0,4.0]),0.0,[0.7458171085243184,0.2541828914756817]]\r\n[(54,[42,46,47,50,53],[1.0,2010.0,1.0,1.0,5.0]),0.0,[0.7482710663428286,0.2517289336571714]]\r\n[(54,[42,46,48,50,53],[1.0,2010.0,1.0,1.0,2.0]),0.0,[0.7573890851176498,0.24261091488235026]]\r\n[(54,[42,46,48,49,53],[1.0,2011.0,1.0,1.0,3.0]),0.0,[0.7281889327066297,0.27181106729337046]]\r\n[(54,[42,46,48,50,53],[1.0,2013.0,1.0,1.0,2.0]),0.0,[0.7573890851176498,0.24261091488235026]]\r\n[(54,[42,46,47,50,53],[1.0,2014.0,1.0,1.0,5.0]),0.0,[0.7482710663428286,0.2517289336571714]]\r\n[(54,[42,46,48,49,53],[1.0,2014.0,1.0,1.0,2.0]),0.0,[0.7294233536856733,0.27057664631432676]]\r\n[(54,[42,46,47,49,53],[1.0,2015.0,1.0,1.0,1.0]),0.0,[0.7153173453943166,0.28468265460568337]]\r\n[(54,[41,46,47,50,53],[1.0,1992.0,1.0,1.0,2.0]),0.0,[0.7436724833965709,0.25632751660342923]]\r\n[(54,[41,46,47,50,53],[1.0,1992.0,1.0,1.0,2.0]),0.0,[0.7436724833965709,0.25632751660342923]]\r\n[(54,[41,46,47,50,53],[1.0,1992.0,1.0,1.0,5.0]),0.0,[0.7582190531711477,0.24178094682885226]]\r\n[(54,[41,46,47,50,53],[1.0,1992.0,1.0,1.0,5.0]),0.0,[0.7582190531711477,0.24178094682885226]]\r\n[(54,[41,46,48,50,53],[1.0,1992.0,1.0,1.0,1.0]),0.0,[0.7801903360153306,0.21980966398466945]]\r\n[(54,[41,46,48,50,53],[1.0,1992.0,1.0,1.0,5.0]),0.0,[0.7894424950420349,0.21055750495796502]]\r\n[(54,[41,46,47,50,53],[1.0,1993.0,1.0,1.0,1.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,48,50,53],[1.0,1993.0,1.0,1.0,2.0]),0.0,[0.7850992661656401,0.21490073383435995]]\r\n[(54,[41,46,47,49,53],[1.0,1994.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1994.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,49,53],[1.0,1994.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,50,53],[1.0,1994.0,1.0,1.0,1.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,47,50,53],[1.0,1994.0,1.0,1.0,4.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,48,50,53],[1.0,1994.0,1.0,1.0,2.0]),0.0,[0.7850992661656401,0.21490073383435995]]\r\n[(54,[41,46,47,49,53],[1.0,1995.0,1.0,1.0,5.0]),0.0,[0.7385568931777433,0.26144310682225674]]\r\n[(54,[41,46,47,50,53],[1.0,1995.0,1.0,1.0,1.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,47,50,53],[1.0,1995.0,1.0,1.0,2.0]),0.0,[0.7436724833965709,0.25632751660342923]]\r\n[(54,[41,46,47,50,53],[1.0,1995.0,1.0,1.0,3.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,48,50,53],[1.0,1995.0,1.0,1.0,2.0]),0.0,[0.7850992661656401,0.21490073383435995]]\r\n[(54,[41,46,48,50,53],[1.0,1995.0,1.0,1.0,3.0]),0.0,[0.7801903360153306,0.21980966398466945]]\r\n[(54,[41,46,47,49,53],[1.0,1996.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1996.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1996.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1996.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1996.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,50,53],[1.0,1996.0,1.0,1.0,1.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,47,50,53],[1.0,1996.0,1.0,1.0,3.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,47,50,53],[1.0,1996.0,1.0,1.0,3.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,47,50,53],[1.0,1996.0,1.0,1.0,3.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,48,49,53],[1.0,1996.0,1.0,1.0,2.0]),0.0,[0.7636861515701253,0.2363138484298747]]\r\n[(54,[41,46,48,50,53],[1.0,1996.0,1.0,1.0,3.0]),0.0,[0.7801903360153306,0.21980966398466945]]\r\n[(54,[41,46,47,49,53],[1.0,1997.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1997.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1997.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,50,53],[1.0,1997.0,1.0,1.0,2.0]),0.0,[0.7436724833965709,0.25632751660342923]]\r\n[(54,[41,46,48,49],[1.0,1997.0,1.0,1.0]),0.0,[0.7815843069438463,0.21841569305615366]]\r\n[(54,[41,46,48,49,53],[1.0,1997.0,1.0,1.0,1.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[41,46,48,49,53],[1.0,1997.0,1.0,1.0,2.0]),0.0,[0.7636861515701253,0.2363138484298747]]\r\n[(54,[41,46,48,49,53],[1.0,1997.0,1.0,1.0,2.0]),0.0,[0.7636861515701253,0.2363138484298747]]\r\n[(54,[41,46,48,49,53],[1.0,1997.0,1.0,1.0,2.0]),0.0,[0.7636861515701253,0.2363138484298747]]\r\n[(54,[41,46,48,49,53],[1.0,1997.0,1.0,1.0,3.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[41,46,48,49,53],[1.0,1997.0,1.0,1.0,4.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[41,46,48,50,53],[1.0,1997.0,1.0,1.0,3.0]),0.0,[0.7801903360153306,0.21980966398466945]]\r\n[(54,[41,46,48,50,53],[1.0,1997.0,1.0,1.0,3.0]),0.0,[0.7801903360153306,0.21980966398466945]]\r\n[(54,[41,46,48,51,53],[1.0,1997.0,1.0,1.0,2.0]),0.0,[0.7159050609345335,0.28409493906546646]]\r\n[(54,[41,46,47,49,53],[1.0,1998.0,1.0,1.0,1.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1998.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,49,53],[1.0,1998.0,1.0,1.0,3.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,49,53],[1.0,1998.0,1.0,1.0,3.0]),0.0,[0.7337947773791713,0.26620522262082863]]\r\n[(54,[41,46,47,50,53],[1.0,1998.0,1.0,1.0,3.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,47,50,53],[1.0,1998.0,1.0,1.0,3.0]),0.0,[0.7489668941444434,0.25103310585555666]]\r\n[(54,[41,46,47,51,53],[1.0,1998.0,1.0,1.0,4.0]),0.0,[0.6942298017939174,0.30577019820608264]]\r\n[(54,[41,46,48,50,53],[1.0,1998.0,1.0,1.0,2.0]),0.0,[0.7850992661656401,0.21490073383435995]]\r\n[(54,[41,46,47,49,53],[1.0,1999.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,49,53],[1.0,1999.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,51,53],[1.0,1999.0,1.0,1.0,1.0]),0.0,[0.7363290340304042,0.26367096596959577]]\r\n[(54,[41,46,47,51,53],[1.0,1999.0,1.0,1.0,1.0]),0.0,[0.7363290340304042,0.26367096596959577]]\r\n[(54,[41,46,48,49,53],[1.0,1999.0,1.0,1.0,1.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[41,46,48,49,53],[1.0,1999.0,1.0,1.0,1.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[41,46,48,49,53],[1.0,1999.0,1.0,1.0,1.0]),0.0,[0.7768221911452744,0.2231778088547256]]\r\n[(54,[41,46,47,49,53],[1.0,2000.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,49,53],[1.0,2000.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n[(54,[41,46,47,49,53],[1.0,2000.0,1.0,1.0,2.0]),0.0,[0.7242775672809603,0.2757224327190396]]\r\n"}]},"apps":[],"jobName":"paragraph_1503798307334_556390656","id":"20170826-214507_1908324424","dateCreated":"2017-08-26T21:45:07-0400","dateStarted":"2017-08-27T12:24:20-0400","dateFinished":"2017-08-27T12:24:41-0400","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:253"},{"text":"val i = \"hi\"\nprint(i)\n","user":"anonymous","dateUpdated":"2017-08-27T09:38:06-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ni: String = hi\nhi"}]},"apps":[],"jobName":"paragraph_1503800769383_994532044","id":"20170826-222609_904774148","dateCreated":"2017-08-26T22:26:09-0400","dateStarted":"2017-08-27T09:38:06-0400","dateFinished":"2017-08-27T09:38:16-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:254"},{"user":"anonymous","dateUpdated":"2017-08-27T09:38:06-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1503807060180_-1403829564","id":"20170827-001100_1485738311","dateCreated":"2017-08-27T00:11:00-0400","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:255"}],"name":"TicketPrediction","id":"2CSRQRET3","angularObjects":{"2CTQA8H9H:shared_process":[],"2CS12W3HZ:shared_process":[],"2CRB9NP2H:shared_process":[],"2CSTGQ6B9:shared_process":[],"2CTH8QUU8:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}